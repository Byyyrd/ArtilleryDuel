/**
 * @type {HTMLCanvasElement}
 */
var canvas = document.getElementById("gameArea");
canvas.width = innerWidth;
canvas.height = innerHeight;
var ctx = canvas.getContext("2d");



var leftPressed = false;
var rigthPressed = false;

function calcDistance(x1, y1, x2, y2) {
    return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2))
}
function inRectangle(px, py, rx, ry, rb, rh) {
    if (rx < px && px < rx + rb && ry < py && py < ry + rh) {
        return true;
    } else {
        return false;
    }

}


function lerp(start, end, amt) {
    return (1 - amt) * start + amt * end;
}
class Projectile {
    xVel = 0;
    yVel = 0;
    gravity = 9.81;
    speed = 10;
    constructor(x, y, angle, strength) {
        this.x = x;
        this.y = y;
        this.angle = angle;
        this.strength = strength;
        this.xVel = strength;
        this.yVel = strength;
    }
    update() {
        this.x += this.xVel * Math.cos(this.angle - Math.PI / 2) / this.strength * this.speed;
        this.y -= this.yVel * Math.sin(this.angle - Math.PI / 2) / this.strength * this.speed;
        //this.xVel -= .25;
        this.yVel -= .05 * this.speed;
    }
    draw(ctx) {
        ctx.fillStyle = 'black';
        ctx.fillRect(this.x, this.y, 5, 5);
    }
}


class Player {
    dir = 0;
    speed = 10;
    xVel = 0;
    angle = 0;
    projectile = null;
    constructor(x, y, size, color) {
        this.x = x;
        this.y = y;
        this.size = size;
        this.color = color;
    }
    draw(ctx) {
        ctx.fillStyle = "darkslategray";
        ctx.fillRect(this.x, this.y, this.size, this.size / 2);
        if (this.angle != 0) {
            ctx.strokeStyle = "red";
            ctx.lineWidth = 5;
            ctx.beginPath();
            var penX = this.x + this.size / 2;
            var penY = this.y + this.size / 4;
            var penStrength = 50;
            var penYVel = penStrength;
            var penXVel = penStrength;
            var penSpeed = 4;
            ctx.moveTo(penX, penY);
            //ctx.lineTo(this.x + this.size/2 + Math.sin(this.angle) * 100, this.y + this.size/4 + Math.cos(this.angle) * 100);
            while (penX < canvas.width && penY < 725) {

                penX += penXVel * Math.cos(this.angle - Math.PI / 2) / penStrength * penSpeed;
                penY -= penYVel * Math.sin(this.angle - Math.PI / 2) / penStrength * penSpeed;

                penYVel -= .05 * penSpeed;
                ctx.lineTo(penX, penY);

            }
            ctx.stroke();
        }
        if (this.projectile != null) {
            this.projectile.draw(ctx);
        }
    }
    update() {
        if (this.projectile != null) {
            this.projectile.update();
        }
        this.move();
    }
    move() {
        if (this.dir != 0) {
            this.xVel = lerp(this.xVel, this.speed * this.dir, 0.3);
        } else {
            this.xVel = lerp(this.xVel, 0, 0.5);
        }
        this.x += this.xVel;
    }
    shoot(mouseX, mouseY) {
        this.angle = Math.atan2(mouseX - (this.x + this.size / 2), mouseY - (this.y + this.size / 4));
        this.projectile = new Projectile(this.x + this.size / 2, this.y + this.size / 4, this.angle, 50);
    }
}

const player = new Player(10, 700, 50, "darkslategray");

function update() {
    requestAnimationFrame(update);
    inputs();
    draw();
    player.update();
    setTimeout(100);
}

function draw() {
    clearScreen();
    //Draw Background
    ctx.fillStyle = "darkolivegreen"
    ctx.fillRect(0, 725, canvas.width, canvas.height - 725);
    //Draw Player
    player.draw(ctx);

}

function clearScreen() {
    ctx.fillStyle = "#2c2c2c";
    ctx.fillRect(0, 0, canvas.width, canvas.height);
}




function inputs() {
    if (leftPressed) {
        player.dir = -1;
    } else if (rigthPressed) {
        player.dir = 1;
    } else {
        player.dir = 0;
    }

}


document.body.addEventListener('keydown', keyDown);
document.body.addEventListener('keyup', keyUp);
canvas.addEventListener('mousedown', mouseClick);

function keyDown(event) {
    if (event.keyCode == 65) {
        leftPressed = true;
    }
    if (event.keyCode == 68) {
        rigthPressed = true;
    }
}
function keyUp(event) {
    if (event.keyCode == 65) {
        leftPressed = false;
    }
    if (event.keyCode == 68) {
        rigthPressed = false;
    }
}

function mouseClick(event) {
    const x = event.clientX;
    const y = event.clientY;
    player.shoot(x, y);
}


update();